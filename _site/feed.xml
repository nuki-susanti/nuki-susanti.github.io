<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-09T18:53:40+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Home</title><subtitle>A fun learning journeys of data</subtitle><author><name>Nuki Susanti</name></author><entry><title type="html">Building Student Registration Database Part 2 - SQL Learning Series</title><link href="http://localhost:4000/database/sql/2023/02/09/student-registration-database-part2.html" rel="alternate" type="text/html" title="Building Student Registration Database Part 2 - SQL Learning Series" /><published>2023-02-09T00:00:00+01:00</published><updated>2023-02-09T00:00:00+01:00</updated><id>http://localhost:4000/database/sql/2023/02/09/student-registration-database-part2</id><content type="html" xml:base="http://localhost:4000/database/sql/2023/02/09/student-registration-database-part2.html"><![CDATA[<p align="center">
  <img src="/assets/images/banners/srd_part1/mysql.png" width="300" />
  <em>Source: wikipedia</em>
</p>

<h2 id="part-2"><strong>Part 2</strong></h2>
<p style="margin-bottom:-50px"></p>

<h3 id="showing-tables">Showing tables</h3>

<p>In this step, I added functionalities to see all created and updated tables based on designed keyword such as student ID, student name, etc.</p>

<p style="margin-bottom:-50px"></p>

<h4 id="a-departments">A. Departments</h4>

<p><b>Database function for reading table “departments”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">showing_department</span><span class="p">(</span><span class="n">department</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        
        <span class="k">if</span> <span class="n">department</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
                SELECT dept_id, dept_name, dean_name, building, room 
                FROM departments WHERE dept_name = %s;
            """</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">(</span><span class="n">department</span><span class="p">,</span> <span class="p">),</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT * FROM departments;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for showing table “departments”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py 
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_department</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Do you want to see one particular department?. Enter department name: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">user_answer</span><span class="p">:</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Department ID"</span><span class="p">,</span> <span class="s">"Department Name"</span><span class="p">,</span> <span class="s">"Dean Name"</span><span class="p">,</span> <span class="s">"Building"</span><span class="p">,</span> <span class="s">"Room"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_department</span><span class="p">(</span><span class="n">user_answer</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">department</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Showing all departments..."</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"No"</span><span class="p">,</span> <span class="s">"Department ID"</span><span class="p">,</span> <span class="s">"Department Name"</span><span class="p">,</span> <span class="s">"Dean Name"</span><span class="p">,</span> <span class="s">"Building"</span><span class="p">,</span> <span class="s">"Room"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_department</span><span class="p">(</span><span class="n">department</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
</code></pre></div></div>

<p>Here, user can search for a particular department by inputting department name. However, when user doesn’t specify anything, it would show all content of the table. Then, when we run this function by writing in terminal <code class="language-plaintext highlighter-rouge">python app.py show-department</code>.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_department1.png" width="500" />
  <em>Running "show-department" without any user input</em>
</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_department2.png" width="500" />
  <em>Running "show-department" with user input</em>
</p>

<h4 id="b-courses">B. Courses</h4>

<p><b>Database function for reading table “courses”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">showing_course</span><span class="p">(</span><span class="n">department</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        
        <span class="k">if</span> <span class="n">department</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT dept_id, course_id, course_name, hour FROM courses WHERE dept_id = %s;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">(</span><span class="n">department</span><span class="p">,</span> <span class="p">),</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT * FROM courses;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for showing table “courses”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_course</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter department ID: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">user_answer</span><span class="p">:</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Department ID"</span><span class="p">,</span> <span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Course Name"</span><span class="p">,</span> <span class="s">"Duration (hr)"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_course</span><span class="p">(</span><span class="n">user_answer</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">department</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Showing all courses..."</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"No"</span><span class="p">,</span> <span class="s">"Department ID"</span><span class="p">,</span> <span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Course Name"</span><span class="p">,</span> <span class="s">"Duration (hr)"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_course</span><span class="p">(</span><span class="n">department</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
</code></pre></div></div>

<p>The same principle also applies here.</p>

<h4 id="c-students">C. Students</h4>

<p><b>Database function for reading table “students”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">showing_student</span><span class="p">(</span><span class="n">student_name</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>

        <span class="k">if</span> <span class="n">student_name</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>     
            <span class="n">student</span> <span class="o">=</span> <span class="p">(</span><span class="s">'%'</span> <span class="o">+</span> <span class="n">student_name</span> <span class="o">+</span> <span class="s">'%'</span><span class="p">,</span> <span class="s">'%'</span> <span class="o">+</span> <span class="n">student_name</span> <span class="o">+</span> <span class="s">'%'</span><span class="p">,)</span> <span class="c1"># Regex
</span>            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
                SELECT student_id, first_name, last_name, gpa FROM students WHERE first_name LIKE %s OR last_name LIKE %s
            """</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">(</span><span class="n">student</span><span class="p">),</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT student_id, first_name, last_name, gpa FROM students;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>I used regular expression or REGEX to filter base on student’s name, both first and last name.</p>

<p><b>Interface function for showing table “students”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_student</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Search for student's name: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">user_answer</span><span class="p">:</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Student ID"</span><span class="p">,</span> <span class="s">"First Name"</span><span class="p">,</span> <span class="s">"Last Name"</span><span class="p">,</span> <span class="s">"GPA"</span><span class="p">],</span>
                 <span class="n">data</span><span class="o">=</span><span class="n">showing_student</span><span class="p">(</span><span class="n">user_answer</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">student_name</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Showing all students..."</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"No"</span><span class="p">,</span> <span class="s">"Student ID"</span><span class="p">,</span> <span class="s">"First Name"</span><span class="p">,</span> <span class="s">"Last Name"</span><span class="p">,</span> <span class="s">"GPA"</span><span class="p">],</span>
                 <span class="n">data</span><span class="o">=</span><span class="n">showing_student</span><span class="p">(</span><span class="n">student_name</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
</code></pre></div></div>

<p>If we run this function by writing in terminal <code class="language-plaintext highlighter-rouge">python app.py show-student</code>. For example, “in” is entered, it will get all student’s name containing “in”.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_student1.png" width="500" />
  <em>Running "show-student" without any user input</em>
</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_student2.png" width="500" />
  <em>Running "show-student" with user input</em>
</p>

<p>Another thing is the GPA here. The default is 0. It will be updated when student has taken a course and obtained a grade. This functionaty will be addressed in the “enrolled” section below.</p>

<h4 id="d-prerequisites">D. Prerequisites</h4>

<p><b>Database function for reading table “prerequisites”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">showing_prereq</span><span class="p">(</span><span class="n">course_id</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">course_id</span><span class="p">,)</span>

        <span class="k">if</span> <span class="n">course_id</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT course_id, course_prereq_id, min_grade FROM prerequisites WHERE course_id = %s"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT * FROM prerequisites;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for showing table “prerequisites”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_prereq</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter course ID: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">user_answer</span><span class="p">:</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Course Prerequisites"</span><span class="p">,</span> <span class="s">"Minimum Grade"</span><span class="p">],</span>
                 <span class="n">data</span><span class="o">=</span><span class="n">showing_prereq</span><span class="p">(</span><span class="n">user_answer</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Showing all course prerequisites..."</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"No"</span><span class="p">,</span> <span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Course Prerequisites"</span><span class="p">,</span> <span class="s">"Minimum Grade"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_prereq</span><span class="p">(</span><span class="n">course_id</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
</code></pre></div></div>

<p>The same principle also applies here.</p>

<h4 id="e-enrolled">E. Enrolled</h4>

<p><b>Function for reading table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">showing_enrolled</span><span class="p">(</span><span class="n">student_id</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_id</span><span class="p">,)</span>

        <span class="k">if</span> <span class="n">student_id</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT student_id, course_id, enrollment_year, grade FROM enrolled WHERE student_id = %s"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"SELECT * FROM enrolled;"</span>
            <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for showing table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_enrolled</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter student ID: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">user_answer</span><span class="p">:</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Student ID"</span><span class="p">,</span> <span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Enrollment year"</span><span class="p">,</span> <span class="s">"Grade"</span><span class="p">],</span>
                 <span class="n">data</span><span class="o">=</span><span class="n">showing_enrolled</span><span class="p">(</span><span class="n">user_answer</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Showing all enrolled students..."</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"No"</span><span class="p">,</span> <span class="s">"Student ID"</span><span class="p">,</span> <span class="s">"Course ID"</span><span class="p">,</span> <span class="s">"Enrollment year"</span><span class="p">,</span> <span class="s">"Grade"</span><span class="p">],</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">showing_enrolled</span><span class="p">(</span><span class="n">course_id</span><span class="p">),</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
</code></pre></div></div>

<p>If we run this function by writing in terminal <code class="language-plaintext highlighter-rouge">python app.py show-enrolled</code>, it will show empty table because we haven’t entered anything. In order to fill out table “enrolled”, we should run <code class="language-plaintext highlighter-rouge">python app.py enroll-student</code>. Please note that student can enroll a course if the prerequisites are met OR if the course doesn’t have any prerequisites. Example below “cs101” does not have any course prerequisite.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/enroll_student1.png" width="500" />
  <em>Running "enroll-student" for course without prerequisites</em>
</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/enroll_student2.png" width="500" />
  <em>Running "enroll-student" for course with prerequisites</em>
</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_enrolled1.png" width="500" />
  <em>Running "show-enrolled" for reading enrolled students</em>
</p>

<p>It is assumed that student has not finished the course and not yet obtained any grade. In order to update this grade, we should run <code class="language-plaintext highlighter-rouge">python update-grade</code>.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_enrolled2.png" width="500" />
  <em>Running "show-enrolled" for reading enrolled students after updating course's grade</em>
</p>

<p>By doing this, we have enough information for student’s GPA. For this purpose, I created another trigger after updating grade in the “enrolled” table.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*File: sql_query.sql*/</span>
<span class="k">DROP</span> <span class="k">TRIGGER</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">after_enrolled_update</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">after_enrolled_update</span>
    <span class="k">AFTER</span> <span class="k">UPDATE</span> <span class="k">ON</span> <span class="n">enrolled</span> 
    <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span>
<span class="k">BEGIN</span>
    <span class="k">UPDATE</span> <span class="n">students</span>
    <span class="k">SET</span> <span class="n">gpa</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">AS</span> <span class="n">e</span> <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">student_id</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">student_id</span> <span class="k">AND</span> <span class="n">e</span><span class="p">.</span><span class="n">grade</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">)</span>
    <span class="k">WHERE</span> <span class="n">student_id</span> <span class="o">=</span> <span class="k">NEW</span><span class="p">.</span><span class="n">student_id</span><span class="p">;</span>
<span class="k">END</span><span class="p">;</span>
</code></pre></div></div>
<p align="center">
  <img src="/assets/images/banners/srd_part1/show_student3.png" width="500" />
  <em>Running "show-student" for querying student's GPA</em>
</p>

<h4 id="f-students-transcript">F. Student’s transcript</h4>

<p>In this step, I added functionality for converting student’s GPA into letter grade (A, B, C, D, E) by creating function in SQL.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*File: sql_query.sql*/</span>
<span class="k">DROP</span> <span class="k">FUNCTION</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">calculate_letter_grade</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">FUNCTION</span> <span class="n">calculate_letter_grade</span><span class="p">(</span><span class="n">gpa</span> <span class="nb">FLOAT</span><span class="p">)</span>
  <span class="k">RETURNS</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">DETERMINISTIC</span>
  <span class="k">BEGIN</span>
    <span class="k">DECLARE</span> <span class="n">letter_grade</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

    <span class="n">IF</span> <span class="n">gpa</span> <span class="o">&gt;=</span> <span class="mi">90</span> <span class="k">THEN</span> <span class="k">SET</span> <span class="n">letter_grade</span> <span class="o">=</span> <span class="s1">'A'</span><span class="p">;</span>
    <span class="n">ELSEIF</span> <span class="n">gpa</span> <span class="o">&gt;=</span> <span class="mi">80</span> <span class="k">THEN</span> <span class="k">SET</span> <span class="n">letter_grade</span> <span class="o">=</span> <span class="s1">'B'</span><span class="p">;</span>
    <span class="n">ELSEIF</span> <span class="n">gpa</span> <span class="o">&gt;=</span> <span class="mi">70</span> <span class="k">THEN</span> <span class="k">SET</span> <span class="n">letter_grade</span> <span class="o">=</span> <span class="s1">'C'</span><span class="p">;</span>
    <span class="n">ELSEIF</span> <span class="n">gpa</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="k">THEN</span> <span class="k">SET</span> <span class="n">letter_grade</span> <span class="o">=</span> <span class="s1">'D'</span><span class="p">;</span>
    <span class="k">ELSE</span> <span class="k">SET</span> <span class="n">letter_grade</span> <span class="o">=</span> <span class="s1">'E'</span><span class="p">;</span>
    <span class="k">END</span> <span class="n">IF</span><span class="p">;</span>
    <span class="k">RETURN</span> <span class="n">letter_grade</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
</code></pre></div></div>

<p><b>Function for querying student’s GPA:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">showing_transcript</span><span class="p">(</span><span class="n">student_id</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
            SELECT student_id, first_name, last_name, gpa, calculate_letter_grade(gpa) AS letter_grade
            FROM students WHERE student_id = %s;
            """</span>

        <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="p">),</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for querying student’s GPA:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">show_transcript</span><span class="p">():</span>
    <span class="n">student_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your student id: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">student_id</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">showing_transcript</span><span class="p">(</span><span class="n">student_id</span><span class="p">)</span>
        <span class="n">pretty_table</span><span class="p">([</span><span class="s">"Student ID"</span><span class="p">,</span> <span class="s">"First Name"</span><span class="p">,</span> <span class="s">"Last Name"</span><span class="p">,</span> <span class="s">"GPA"</span><span class="p">,</span> <span class="s">"Letter Grade"</span><span class="p">],</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">in_color</span><span class="o">=</span><span class="s">"green"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<p>If we run this function by writing in terminal <code class="language-plaintext highlighter-rouge">python app.py show-transcript</code>, it will show student’s transcript.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/show_transcript.png" width="500" />
  <em>Running "show-student" for querying student's transcript</em>
</p>

<p><b>So, this is the end of Student Registration Database project, during which I had fun exploring and learning more about SQL :)</b></p>

<h2 id="conclusions"><strong>Conclusions</strong></h2>

<p>During this project, I learned these following points:</p>

<p style="margin-top:-10px"></p>

<ol>
  <li>Creating ERD (Entity Relationship Diagram)</li>
  <li>Creating DDL (Data Definition Language: CREATE), DML (Data Manipulation Language: SELECT, INSERT, UPDATE), TCL (Transaction Control Language: COMMIT)</li>
  <li>Applying constraints on MySQL schema</li>
  <li>Applying parameterized statements</li>
  <li>Creating trigger, function and temporary table</li>
  <li>Building CLI-based application</li>
</ol>

<p style="margin-bottom:30px"></p>

<p>Find the code for this project <a href="https://github.com/nuki-susanti/Student-Registration-Database" target="_blank">Github</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="database" /><category term="SQL" /><category term="database" /><category term="programming" /><category term="MySQL" /><category term="SQL" /><category term="python" /><summary type="html"><![CDATA[Source: wikipedia]]></summary></entry><entry><title type="html">Building Student Registration Database Part 1 - SQL Learning Series</title><link href="http://localhost:4000/database/sql/2023/02/08/student-registration-database-part1.html" rel="alternate" type="text/html" title="Building Student Registration Database Part 1 - SQL Learning Series" /><published>2023-02-08T00:00:00+01:00</published><updated>2023-02-08T00:00:00+01:00</updated><id>http://localhost:4000/database/sql/2023/02/08/student-registration-database-part1</id><content type="html" xml:base="http://localhost:4000/database/sql/2023/02/08/student-registration-database-part1.html"><![CDATA[<p align="center">
  <img src="/assets/images/banners/srd_part1/mysql.png" width="300" />
  <em>Source: wikipedia</em>
</p>

<h2 id="motivation"><strong>Motivation</strong></h2>

<p>After completing Data Analysis course, I still feel somehow that SQL topic hadn’t been explored sufficiently. In short, I’m not satisfied enough and need more exercises. I’ve done one SQL-based project using PostgreSQL in which SQL query was used to answer business questions. That project honestly really helps me to understand some important concepts of RDBMS, such as join and CTE (Common Table Expression). Now, I would like to explore SQL from the scratch, from SQL programming to querying. This project will be series learning projects. My goal is hopefully, at the end of the learning series, I could level up my SQL knowledge.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="overview---project-and-tools"><strong>Overview - Project and Tools</strong></h2>

<p>I did some research what I could use as a starting point and came across <a href="https://datamastery.gitlab.io/exercises/registration-database.html">Student Registration Database</a>. This is very simple database schema that I could modify into little bit more complex one. So, I decided to pick this one with some modifications:</p>

<p style="margin-top:-10px"></p>

<ul>
  <li>I want to have interface application to interact with the database. However, as I don’t want to spend time building frontend interface, CLI-based application could be a way out. For this purpose, I use python library called Typer as well as Rich.</li>
  <li>I will use MySQL and cloud-based free RDBMS live environment such as <a href="https://railway.app/new">railway.app</a>. As term “free” suggests, it is free to use but only for 24 hours. Afterwards, it will be automatically erased and we have to make a new project environment. It means that we have also to change the connection every 24 hours.</li>
  <li>As there are no business requirements listed, I may add some constraints or check on the tables along the way (see process point 3).</li>
  <li>All data checking and constraint will be in the database side. Though application (python) could also do this heavy lifting task, however, the aim of this project is that me exploring and learning SQL. So, this might not reflect the ideal condition in the real world.</li>
</ul>

<p><b>Tech Stack:</b></p>

<p style="margin-top:-10px"></p>

<ul>
  <li><a href="https://typer.tiangolo.com">Typer</a> - For building great CLIs that are easy to code</li>
  <li><a href="https://rich.readthedocs.io/en/stable/introduction.html">Rich</a> - Rich text and beautiful formatting in the terminal</li>
  <li>Cloud-based database environment – <a href="https://railway.app/new">railway.app</a></li>
  <li>And of course python</li>
</ul>

<p style="margin-bottom:-30px"></p>

<h2 id="process"><strong>Process</strong></h2>
<p style="margin-bottom:-50px"></p>

<h3 id="1-installing-typer-and-rich">1.	Installing Typer and Rich</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">typer</span> <span class="n">rich</span>
</code></pre></div></div>

<h3 id="2-creating-mysql-provision-on-railwayapp">2.	Creating MySQL provision on railway.app</h3>

<div class="container" style="display: inline-block;">  
  <figure>
  <div style="float: left; padding: 10px;">
    <img src="/assets/images/banners/srd_part1/railway1.png" width="300" height="350" align="center" />
    <figcaption align="center"><i>MySQL environment provided by railway.app</i></figcaption>
  </div>

  <div style="float: right; padding: 10px;">
    <img src="/assets/images/banners/srd_part1/connection.png" width="300" height="350" align="center" />
    <figcaption align="center"><i>Connection details railway.app</i></figcaption>
  </div>
  </figure>
</div>

<p>In case database shell is to be used in IDE (I used VS Code here and MySQL extension), those connection details must be entered.</p>

<h3 id="3-creating-erd-entity-relationship-diagram">3.	Creating ERD (Entity Relationship Diagram)</h3>

<p>I used <a href="https://dbdiagram.io/">dbdiagram.io</a> for this purpose.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/erd.png" width="800" />
  <em>Entity Relationship Diagram (ERD)</em>
</p>

<p>So, I made some <b>improvisation and constraints</b> on the schema:</p>

<p style="margin-top:-10px"></p>

<ul>
  <li>I added prerequisites table to address mandatory course to take other courses as well as its corresponding minimum grade to pass. For example: students can’t enroll Mathematics 2 when they haven’t taken Mathematics 1 with a minimum grade of 60.</li>
  <li>Students can only take same course in a year, meaning if they don’t pass a course in year 2022, they can only enroll again in year 2023.</li>
  <li>Grade is set between 0 – 100.</li>
</ul>

<h3 id="4-separating-files-based-on-its-purpose">4. Separating files based on its purpose</h3>

<p>I managed to divide the entire application into 4 files:</p>

<p style="margin-top:-10px"></p>

<ol>
  <li><b><i>app.py</i></b> - This is the interface of the application. However, as I mentioned, this is CLI-based application. So, interface is not actually interface as you can still see the code.</li>
  <li><b><i>db.py</i></b> - Storing function for database interaction.</li>
  <li><b><i>sql_query.sql</i></b> - Storing SQL schema, trigger and function.</li>
  <li><b><i>db_seed.py</i></b> - Storing initial data to populate tables.</li>
</ol>

<h3 id="5-lets-roll">5.	Let’s roll!</h3>

<p style="margin-bottom:-30px"></p>

<h2 id="part-1"><strong>Part 1</strong></h2>
<p style="margin-bottom:-50px"></p>

<h3 id="creating-schema">Creating schema</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*File: sql_query.sql*/</span>
<span class="k">DROP</span> <span class="k">DATABASE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">railway</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">railway</span><span class="p">;</span>
<span class="n">USE</span> <span class="n">railway</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">departments</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">dept_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span><span class="p">,</span>
    <span class="n">dept_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">dean_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">building</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">room</span> <span class="nb">INTEGER</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">courses</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">dept_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">course_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span><span class="p">,</span>
    <span class="n">course_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>  
    <span class="n">hour</span> <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">dept_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">departments</span><span class="p">(</span><span class="n">dept_id</span><span class="p">)</span>
        <span class="k">ON</span> <span class="k">UPDATE</span> <span class="k">CASCADE</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">students</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">student_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span><span class="p">,</span>
    <span class="n">first_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">last_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">gpa</span> <span class="nb">FLOAT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="mi">0</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">prerequisites</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">course_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">course_prereq_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">min_grade</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">course_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">courses</span><span class="p">(</span><span class="n">course_id</span><span class="p">)</span>
        <span class="k">ON</span> <span class="k">UPDATE</span> <span class="k">CASCADE</span><span class="p">,</span>
    <span class="k">CHECK</span> <span class="p">(</span><span class="n">min_grade</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">AND</span> <span class="n">min_grade</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">enrolled</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">student_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">course_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">enrollment_year</span> <span class="nb">YEAR</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">grade</span> <span class="nb">INTEGER</span><span class="p">,</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">student_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">students</span><span class="p">(</span><span class="n">student_id</span><span class="p">)</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="k">CASCADE</span><span class="p">,</span>
    <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">course_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">courses</span><span class="p">(</span><span class="n">course_id</span><span class="p">)</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="k">CASCADE</span><span class="p">,</span>
    <span class="k">UNIQUE</span> <span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">enrollment_year</span><span class="p">),</span>
    <span class="k">CHECK</span> <span class="p">(</span><span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">AND</span> <span class="n">grade</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="creating-mysql-connection">Creating MySQL connection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">create_server_connection</span><span class="p">():</span>
    <span class="n">connection</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">connection</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span>
            <span class="n">user</span><span class="o">=</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"USERNAME"</span><span class="p">),</span>
            <span class="n">password</span><span class="o">=</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"PASSW"</span><span class="p">),</span>
            <span class="n">host</span><span class="o">=</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"HOST"</span><span class="p">),</span>
            <span class="n">port</span><span class="o">=</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"PORT"</span><span class="p">),</span>
            <span class="n">database</span><span class="o">=</span><span class="n">env</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"DB"</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="k">print</span><span class="p">(</span><span class="s">"Successfully connected to MySQL"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: '</span><span class="si">{</span><span class="n">err</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">connection</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">sql_connection</span><span class="p">():</span>
    <span class="n">create_server_connection</span><span class="p">()</span>
</code></pre></div></div>

<p>As you can see, connection details are saved in the .env file for confidentiality purpose. Later, it can be easily .gitignore-d.</p>

<h3 id="creating-table-and-populating-database">Creating table and populating database</h3>

<p><b>Creating tables from schema:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">resetting_db</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">con</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cur</span><span class="p">:</span>
                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'sql_query.sql'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">statement</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">(),</span> <span class="n">multi</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
                        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Executed: </span><span class="si">{</span><span class="n">statement</span><span class="p">.</span><span class="n">statement</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: '</span><span class="si">{</span><span class="n">err</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Creating data seed to populate tables:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db_seed.py
</span><span class="n">seed_departments</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">"cs"</span><span class="p">,</span> <span class="s">"computer science"</span><span class="p">,</span> <span class="s">"rubio"</span><span class="p">,</span> <span class="s">"ajax"</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math"</span><span class="p">,</span> <span class="s">"mathematics"</span><span class="p">,</span> <span class="s">"carson"</span><span class="p">,</span> <span class="s">"acme"</span><span class="p">,</span> <span class="mi">300</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ee"</span><span class="p">,</span> <span class="s">"electrical engineering"</span><span class="p">,</span> <span class="s">"kasich"</span><span class="p">,</span> <span class="s">"ajax"</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ie"</span><span class="p">,</span> <span class="s">"industrial engineering"</span><span class="p">,</span> <span class="s">"cruz"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"music"</span><span class="p">,</span> <span class="s">"musicology"</span><span class="p">,</span> <span class="s">"costello"</span><span class="p">,</span> <span class="s">"north"</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">]</span>

<span class="n">seed_courses</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">"cs"</span><span class="p">,</span> <span class="s">"cs101"</span><span class="p">,</span> <span class="s">"programming"</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"cs"</span><span class="p">,</span> <span class="s">"cs201"</span><span class="p">,</span> <span class="s">"algorithms"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"cs"</span><span class="p">,</span> <span class="s">"cs202"</span><span class="p">,</span> <span class="s">"systems"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math"</span><span class="p">,</span> <span class="s">"math101"</span><span class="p">,</span> <span class="s">"algebra"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math"</span><span class="p">,</span> <span class="s">"math201"</span><span class="p">,</span> <span class="s">"calculus"</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math"</span><span class="p">,</span> <span class="s">"math301"</span><span class="p">,</span> <span class="s">"analysis"</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ee"</span><span class="p">,</span> <span class="s">"ee102"</span><span class="p">,</span> <span class="s">"circuits"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ie"</span><span class="p">,</span> <span class="s">"ie101"</span><span class="p">,</span> <span class="s">"probability"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ie"</span><span class="p">,</span> <span class="s">"ie102"</span><span class="p">,</span> <span class="s">"statistics"</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"music"</span><span class="p">,</span> <span class="s">"music104"</span><span class="p">,</span> <span class="s">"jazz"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="p">]</span>

<span class="n">seed_prerequisites</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">"cs202"</span><span class="p">,</span> <span class="s">"cs201"</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"cs201"</span><span class="p">,</span> <span class="s">"cs101"</span><span class="p">,</span> <span class="mi">75</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math301"</span><span class="p">,</span> <span class="s">"math201"</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"math201"</span><span class="p">,</span> <span class="s">"math101"</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span>
<span class="p">]</span>

<span class="n">seed_students</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="s">"tb01"</span><span class="p">,</span> <span class="s">"tom"</span><span class="p">,</span> <span class="s">"bush"</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"ch01"</span><span class="p">,</span> <span class="s">"cruz"</span><span class="p">,</span> <span class="s">"hening"</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"cs01"</span><span class="p">,</span> <span class="s">"clinton"</span><span class="p">,</span> <span class="s">"smith"</span><span class="p">),</span>
    <span class="p">(</span><span class="s">"es01"</span><span class="p">,</span> <span class="s">"evan"</span><span class="p">,</span> <span class="s">"sanders"</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<p><b>Populating database with data seed:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">populating_db</span><span class="p">():</span>

    <span class="n">sql_departments</span> <span class="o">=</span> <span class="s">"""
      INSERT INTO departments(dept_id, dept_name, dean_name, building, room) 
      VALUES(%s, %s, %s, %s, %s);
    """</span>
    <span class="n">sql_courses</span> <span class="o">=</span> <span class="s">"""
      INSERT INTO courses(dept_id, course_id, course_name, hour) 
      VALUES(%s, %s, %s, %s);
    """</span>
    <span class="n">sql_prerequisites</span> <span class="o">=</span> <span class="s">"""
      INSERT INTO prerequisites(course_id, course_prereq_id, min_grade) 
      VALUES(%s, %s, %s);
    """</span>
    <span class="n">sql_students</span> <span class="o">=</span> <span class="s">"""
      INSERT INTO students(student_id, first_name, last_name) 
      VALUES(%s, %s, %s);
    """</span>

    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_departments</span><span class="p">,</span> <span class="n">db_seed</span><span class="p">.</span><span class="n">seed_departments</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_courses</span><span class="p">,</span> <span class="n">db_seed</span><span class="p">.</span><span class="n">seed_courses</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_prerequisites</span><span class="p">,</span> <span class="n">db_seed</span><span class="p">.</span><span class="n">seed_prerequisites</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_students</span><span class="p">,</span> <span class="n">db_seed</span><span class="p">.</span><span class="n">seed_students</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Database is successfully initialized."</span><span class="p">)</span>
</code></pre></div></div>

<p>Here, query function was created to handle CRUD (Create, read, update and delete) operations and thus, also reducing boiler plate code that will be used during interaction with database.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">connection</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">many</span><span class="p">:</span>
            <span class="n">cur</span><span class="p">.</span><span class="n">executemany</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">cur</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">fetch</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">cur</span><span class="p">.</span><span class="n">fetchall</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>

        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Executed successfully: </span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="s">"Successful!"</span><span class="p">,</span>
                   <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">GREEN</span><span class="p">))</span>

    <span class="k">except</span> <span class="p">(</span><span class="n">IntegrityError</span><span class="p">,</span> <span class="n">DatabaseError</span><span class="p">,</span> <span class="n">Error</span><span class="p">)</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span>
            <span class="sa">f</span><span class="s">"Failed. You have an error message: 
              </span><span class="si">{</span><span class="n">typer</span><span class="p">.</span><span class="n">style</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">WHITE</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="n">typer</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">RED</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">cur</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>It is also worth mentioning that parameterized statements “%s” was used rather than literal string for security reason, namely preventing SQL injection.</p>

<p><b>Interface look:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">reset_db</span><span class="p">(</span><span class="n">data_seed</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span>
        <span class="s">"Are you sure? This will delete all the data. (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">resetting_db</span><span class="p">()</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Successfully reset database"</span><span class="p">)</span>

    <span class="c1"># It will automatically populate database with data seed stored in db_seed.
</span>    <span class="c1"># Otherwise user should specify --no-data-seed
</span>        <span class="k">if</span> <span class="n">data_seed</span><span class="p">:</span>
            <span class="n">populating_db</span><span class="p">()</span> 
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Database reset aborted"</span><span class="p">)</span>
</code></pre></div></div>

<p>Then, when we run this function by writing in terminal <code class="language-plaintext highlighter-rouge">python app.py reset-db</code>.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/terminal1.png" width="500" />
  <em>Running "reset-db" for resetting and populating database</em>
</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/terminal2.png" width="500" />
  <em>Resetting database successful</em>
</p>

<p>It seems to work, but let’s check our database.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/railway2.png" width="500" />
  <em>Tables are successfully created</em>
</p>

<p>So, our database is successfully populated with our initial data.</p>

<p align="center">
  <img src="/assets/images/banners/srd_part1/railway3.png" width="500" />
  <em>Tables are successfully populated</em>
</p>

<h3 id="updating-tables">Updating tables</h3>

<p>In this step, I added functionalities to add and update all those tables: departments, courses, students, prerequisites and ‚enrolled.</p>

<p style="margin-bottom:-50px"></p>

<h4 id="a-departments">A. Departments</h4>

<p><b>Database function for updating table “departments”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py 
</span><span class="k">def</span> <span class="nf">adding_department</span><span class="p">(</span><span class="n">dept_details</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
          INSERT INTO departments(dept_id, dept_name, dean_name, building, room) 
          VALUES(%s, %s, %s, %s, %s);
        """</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">dept_details</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating table “departments”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py 
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">add_department</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Do you want to add a department? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        
        <span class="n">dept_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter department ID: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">dept_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter department name: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">dean_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter dean name of the department (optional): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">building</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter building name (optional): "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">room</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter room number (optional): "</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">room</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">dept_details</span> <span class="o">=</span> <span class="p">(</span><span class="n">dept_id</span><span class="p">,</span> <span class="n">dept_name</span><span class="p">,</span> <span class="n">dean_name</span><span class="p">,</span> <span class="n">building</span><span class="p">,</span> <span class="n">room</span><span class="p">)</span>

        <span class="n">adding_department</span><span class="p">(</span><span class="n">dept_details</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<p>From this process I found out that when user doesn’t input anything (in other words, empty string) for columns “dept_id” and “dept_name”, it is still inserted into database, though I specified “NOT NULL” constraint in the table schema. Eventually, NOT NULL constraint enforces a column to NOT accept NULL values only. Whereas empty string is still interpreted as a value. This of course will be data integrity problem. In order to prevent this from happening, another check for empty string is enforced.</p>

<p>For the other columns: “dean_name”, “building” and “room”, they can hold NULL values which aren’t necessary to be declared explicitly as the default setting are NULL (DEFAULT NULL). However, a problem will arise when converting empty string to integer, so that it was set to be None as default value to be able to insert into the database.</p>

<p><b>Updated database schema:</b></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*File: sql_query.sql*/</span>
<span class="k">DROP</span> <span class="k">DATABASE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">railway</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">railway</span><span class="p">;</span>
<span class="n">USE</span> <span class="n">railway</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">departments</span><span class="p">(</span>
    <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">dept_id</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">dept_id</span> <span class="o">!=</span> <span class="nv">""</span><span class="p">),</span>
    <span class="n">dept_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">CHECK</span> <span class="p">(</span><span class="n">dept_name</span> <span class="o">!=</span> <span class="nv">""</span><span class="p">),</span>
    <span class="n">dean_name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">building</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">room</span> <span class="nb">INTEGER</span>
<span class="p">);</span>
</code></pre></div></div>

<h4 id="b-courses">B. Courses</h4>

<p><b>Database function for updating table “courses”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span> <span class="k">def</span> <span class="nf">adding_course</span><span class="p">(</span><span class="n">course_details</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
          INSERT INTO courses(dept_id, course_id, course_name, hour) 
          VALUES(%s, %s, %s, %s);
        """</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">course_details</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating table “courses”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">add_course</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Do you want to add a course? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">dept_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter department ID: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter course ID: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">course_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter course name: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">hour</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter the duration of the course in hour: "</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">hour</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">course_details</span> <span class="o">=</span> <span class="p">(</span><span class="n">dept_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">course_name</span><span class="p">,</span> <span class="n">hour</span><span class="p">)</span>

        <span class="n">adding_course</span><span class="p">(</span><span class="n">course_details</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="c-students">C. Students</h4>

<p><b>Database function for updating table “students”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">adding_student</span><span class="p">(</span><span class="n">student_details</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"INSERT INTO students(student_id, first_name, last_name) VALUES(%s, %s, %s);"</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">student_details</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating table “students”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">add_student</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Do you want add a student? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">student_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter student id: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">first_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter student's first name: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">last_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter student's last name: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

        <span class="n">student_details</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>

        <span class="n">adding_student</span><span class="p">(</span><span class="n">student_details</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="d-prerequisites">D. Prerequisites</h4>

<p><b>Database function for updating table “prerequisites”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">adding_prereq</span><span class="p">(</span><span class="n">prereq_details</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
          INSERT INTO prerequisites(course_id, course_prereq_id, min_grade) VALUES(%s, %s, %s);
        """</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">prereq_details</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating table “prerequisites”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">add_prereq</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span>
        <span class="s">"Do you want to add prerequisite for a course? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter course ID: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">course_prereq_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter course prerequisite: "</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">min_grade</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter the minimum grade for the course: "</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">min_grade</span> <span class="o">=</span> <span class="mi">50</span>  <span class="c1"># default minimum grade            
</span>
        <span class="n">prereq_details</span> <span class="o">=</span> <span class="p">(</span><span class="n">course_id</span><span class="p">,</span> <span class="n">course_prereq_id</span><span class="p">,</span> <span class="n">min_grade</span><span class="p">)</span>

        <span class="n">adding_prereq</span><span class="p">(</span><span class="n">prereq_details</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="e-enrolled">E. Enrolled</h4>

<p>Enrolled table aims to store students and their enrolled course. However, there are constraints in enrolling student for a course, as I mentioned previously in the beginning:</p>

<p style="margin-top:-10px"></p>

<ul>
  <li>Mandatory course has to be taken before taking other consecutive courses with its corresponding minimum grade to pass. For example: students can’t enroll Mathematics 2 when they haven’t taken Mathematics 1 with a minimum grade of 60. The prerequisites of the courses are stored in table “prerequisites”.</li>
  <li>Students can only take same course in a year, meaning if they don’t pass a course in year 2022, they can only enroll again in year 2023. This has been specified as “UNIQUE” constraint in the schema.</li>
</ul>

<p>For this purpose, I created trigger to check before inserting (enrolling) student for a course. Trigger must ensure that it checks the prerequisite course and minimum grade.</p>

<p><b>Trigger for requirements checking before inserting into table “enrolled”:</b></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*File: sql_query.sql
/*Creating a trigger and temporary table*/
DROP TRIGGER IF EXISTS before_enrolled_insert;
CREATE TRIGGER before_student_course_insert
    BEFORE INSERT ON enrolled 
    FOR EACH ROW
BEGIN
    /*Create temporary tables to hold 1. prerequisites of courses and 2. unmet_prereqs*/
    DROP TEMPORARY TABLE IF EXISTS tempo_prereqs;
    DROP TEMPORARY TABLE IF EXISTS unmet_prereqs;
    CREATE TEMPORARY TABLE IF NOT EXISTS tempo_prereqs(
        course_prereq VARCHAR(10) REFERENCES courses(course_id),
        min_grade INTEGER
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS unmet_prereqs(
        course_prereq VARCHAR(10) REFERENCES courses(course_id)
    );
    
    /*Does this course have prereqs? If yes, insert them into temp_prereq -&gt; filter out the course*/
    INSERT INTO tempo_prereqs(course_prereq, min_grade)
    SELECT course_prereq_id, min_grade FROM prerequisites WHERE course_id = NEW.course_id;
    /*New course ID we want to insert*/

    /*Are there any unmet prereqs? -&gt; student-specific*/
    INSERT INTO unmet_prereqs(course_prereq)
    SELECT course_prereq
    FROM tempo_prereqs AS tp
    WHERE tp.course_prereq NOT IN
        (SELECT e.course_id FROM enrolled AS e WHERE e.student_id= NEW.student_id AND e.grade &gt; tp.min_grade);

    /*If there are, insert will fail and message the user*/
    IF EXISTS (SELECT course_prereq FROM unmet_prereqs) THEN
        SET @message_text = CONCAT(
            'Student ', NEW.student_id, ' cannot take course ', NEW.course_id, 
            ' because not all the prerequisites are met.'
            );

        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = @message_text;
    END IF;
END;
</span></code></pre></div></div>

<p><b>Database function for updating table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">enrolling_student</span><span class="p">(</span><span class="n">enrollment_details</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"INSERT INTO student_course(student_id, course_id, enrollment_year) VALUES(%s, %s, %s);"</span>
        <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">enrollment_details</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">enroll_student</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span>
        <span class="s">"Do you want to enroll a student? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">student_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your student id: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your course id you want to enroll: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">year</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">year</span>

        <span class="n">enrollment_details</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span>

        <span class="n">enrolling_student</span><span class="p">(</span><span class="n">enrollment_details</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<p>Further, to support this functionality, <code class="language-plaintext highlighter-rouge">update-grade</code> command is added so that we can set if a student should/should not pass a course.</p>

<p><b>Database function for updating grade in table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: db.py
</span><span class="k">def</span> <span class="nf">updating_grade</span><span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">grade</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">create_server_connection</span><span class="p">()</span> <span class="k">as</span> <span class="n">con</span><span class="p">:</span>
        <span class="n">sql_script</span> <span class="o">=</span> <span class="s">"""
          UPDATE enrolled SET grade = %s WHERE student_id = %s 
          AND course_id = %s 
          AND enrollment_year = %s;
        """</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">grade</span><span class="p">,</span> <span class="n">student_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">query</span><span class="p">(</span><span class="n">con</span><span class="p">,</span> <span class="n">sql_script</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p><b>Interface function for updating grade in table “enrolled”:</b></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: app.py
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">update_grade</span><span class="p">():</span>
    <span class="n">user_answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Do you want to update course grade? (y/n): "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">user_answer</span> <span class="o">==</span> <span class="s">"y"</span><span class="p">:</span>
        <span class="n">student_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your student id: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
        <span class="n">course_id</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the course id: "</span><span class="p">).</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">year</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter the year: "</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">year</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">year</span>

        <span class="n">grade</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter your grade: "</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>

        <span class="n">updating_grade</span><span class="p">(</span><span class="n">student_id</span><span class="p">,</span> <span class="n">course_id</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">typer</span><span class="p">.</span><span class="n">echo</span><span class="p">(</span><span class="s">"Okay. Thank you!"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusions"><strong>Conclusions</strong></h2>

<p><b>This is the end of part 1. I will continue in the part 2 for the rest of functionalities.</b></p>

<p style="margin-bottom:30px"></p>

<p>Find the code for this project <a href="https://github.com/nuki-susanti/Student-Registration-Database">Github</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="database" /><category term="SQL" /><category term="database" /><category term="programming" /><category term="MySQL" /><category term="SQL" /><category term="python" /><summary type="html"><![CDATA[Source: wikipedia]]></summary></entry><entry><title type="html">How Safe Are We On The Road? - Road Crash Analysis</title><link href="http://localhost:4000/data%20analysis/data%20science/machine%20learning/2023/01/10/road-crash-analysis.html" rel="alternate" type="text/html" title="How Safe Are We On The Road? - Road Crash Analysis" /><published>2023-01-10T00:00:00+01:00</published><updated>2023-01-10T00:00:00+01:00</updated><id>http://localhost:4000/data%20analysis/data%20science/machine%20learning/2023/01/10/road-crash-analysis</id><content type="html" xml:base="http://localhost:4000/data%20analysis/data%20science/machine%20learning/2023/01/10/road-crash-analysis.html"><![CDATA[<p align="center">
  <img src="/assets/images/banners/road_crash/car_accident.jpg" width="500" />
  <em>Source: pixabay</em>
</p>

<h2 id="overview---business-problem"><strong>Overview - Business problem</strong></h2>
<p>According to WHO, approximately 1.3 million people die each year as a result of road traffic crashes. Between 20 and 50 million more people suffer non-fatal injuries, with many incurring a disability as a result of their injury. In addition, road traffic crashes cost most countries 3% of their gross domestic product. This worldwide-phenomenon has been quite alarming as private transportation ownership increases, resulting in volume rise of vehicles on the road as well as traffic accidents. It is therefore critical to analyze and derive insights on what factors that could potentially influence the road accident events. These insights could be used for road accidents prevention measures.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="goal"><strong>Goal</strong></h2>
<p>The objective of this road safety analysis to help analyze the influential factors causing traffic accidents, locate accident hot-spots and perform classification supervised machine learning to predict accident severity. Python and Tableau are used for data visualization and analysis presentation. Personally, as a professional in HSE area (Health Safety Environment), I selected this analysis subject intentionally to add values and insights to my current knowledge.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="data"><strong>Data</strong></h2>
<ul>
  <li>Open source road crash and casualties data from 2021 in South Australia collected by Department for Infrastructure and Transport. Cleaned and merged data results in 21,242 cases of traffic accidents. It can be found <a href="https://data.sa.gov.au/data/dataset/road-crash-data/resource/1057e9ae-4672-4123-9c1d-1877483da401?inner_span=True">here</a>.</li>
  <li><a href="https://data.sa.gov.au/data/dataset/road-crash-data/resource/02fb14f9-8dcb-4a59-863c-5f7cc3ae1832">Data information and dictionary</a></li>
  <li><a href="https://data.sa.gov.au/data/dataset/suburb-boundaries">Geojson of South Australian suburb boundaries</a></li>
</ul>

<p style="margin-bottom:-30px"></p>

<h2 id="process"><strong>Process</strong></h2>
<p>This analysis, therefore, could be divided into two parts:</p>
<ol style="margin-top:-20px;">
  <li>Part 1: Data mining</li>
  <li>Part 2: Model building</li>
</ol>

<p>Data mining methodology called CRISP-DM(Cross Industry Standard Process for Data Mining, without deployment) is used to during this analysis process.</p>
<p align="center">
  <img src="/assets/images/banners/road_crash/data_mining_steps.png" />
  <em>CRISP-DM Methodology. Source by author.</em>
</p>

<ol>
  <li>Business understanding</li>
  <li>Data understanding</li>
  There are 3 datasets for this analysis: ‘crash’, ‘unit’ and ‘casualty’. I started this process by reading the data dictionary provided and comparing with the content of the datasets. Data quality and integrity check were then performed for each dataset. Each step is documented as it necessary for the data cleaning.
  <li>Data preparation</li>
  Based on the previous checks, data cleaning was performed which include removing duplicates, handling missing values, error typing of records and outliers. Finally, datasets were merged. Documentation of performed steps were included in the Jupyter notebook, such as below:
  <p>
  
  </p>
  <p align="center">
    <img src="/assets/images/banners/road_crash/data_cleaning.png" width="700" />
    <em>Sample of data preparation documentation</em>
  </p>
  <li>Mining the data</li>
  <dt>Here the data exploratory began, divided into several categories:</dt>
  <dd>- General accident distribution</dd>
  <dd>- Time-based analysis: hourly, daily and monthly</dd>
  <dd>- People-based analysis: sex, age, alcohol and drugs involvement</dd>
  <dd>- Weather-based analysis</dd>
  <dd>- Spatial analysis</dd>
</ol>

<h2 id="part-1-data-mining">Part 1: Data mining</h2>

<p style="margin-bottom:-30px"></p>

<h3 id="accident-distribution---how-severe-are-accidents-are-on-the-road">Accident distribution - How severe are accidents are on the road?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_severity.png" width="300" />
  <em>Accident distribution by accident severity</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_severity.png" width="300" />
  <em>Average total casualty by accident severity</em>
</p>

<p>Pie chart shows property damage with no casualty (PDO) as the lightest level of accident severity accounts for 65.7% of the reported cases. The rest of the cases (34.4%) were divided into three higher severity levels; minor injury, serious injury and death (fatality). It can be seen that death or fatality accounts only for 0.6% of the reported accident cases.  However, compared to serious and minor injury groups, it takes the highest of number casualty in average.</p>

<h3 id="time-based-analysis-when-do-most-accident-happens-in-hourly-basis">Time-based analysis: When do most accident happens, in hourly basis?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_hour.png" width="500" />
  <em>Accident distribution by hour</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_number_by_hour.png" width="800" height="300" />
  <em>Percentage of number of accidents by hour</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_hour.png" width="800" height="200" />
  <em>Average total casualty by hour</em>
</p>

<p>In general, accidents occurrence starts to rise in the morning rush-hour, at 08:00 and reaches its peak during afternoon rush-hour, from 15:00 to 17:00. It is the decreasing afterwards. However, a little bit different patterns is shown by fatality category. Fatality cases are shown to be high since midnight at 02:00 and steadily increases during morning rush-hour until reaches its peaks in the mid-day at 12:00 and in the afternoon rush-hour. While it decreases after afternoon rush-hour, it climbs again at 21:00. From this pattern, fatality cases mostly happen in these two time frames: least crowded time and crowded time. In terms of average casualty of fatality accidents, there seems to be an hourly pattern that shows peak at 5, 12, 18 and 22.</p>

<h3 id="time-based-analysis-when-do-most-accident-happens-in-daily-basis">Time-based analysis: When do most accident happens, in daily basis?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_day.png" width="500" />
  <em>Accident distribution by day</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_number_by_day.png" width="800" height="300" />
  <em>Percentage of number of accidents by day</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_day.png" width="800" height="200" />
  <em>Average total casualty by day</em>
</p>

<p>Based on its characteristics, accident occurences of PDO and minor injury group steadily increase from Monday and reach peak on Thursday and decreases afterwards, even during weekend. Accident occurences on serious injury generally remain steady during the whole week. While, fatatality cases rises steadily from Monday and peak on Thursday and increases during weekend.</p>

<p>Generally, average casualty on fatality and serious injury remains stable during weekeday and slightly rise during weekend. Conversely, average casualty on minor injury remains stabil during weekday, but decreases during weekend. From this pattern, there seems to be general behavior occurs during the week: Thursday becomes the day of high number of accidents and high casualty, weekend generally shows lower vehicle volumes but increase fatality cases and fatality casualty.</p>

<h3 id="time-based-analysis-when-do-most-accident-happens-in-monthly-basis">Time-based analysis: When do most accident happens, in monthly basis?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_month.png" width="500" />
  <em>Accident distribution by month</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_number_by_month.png" width="800" height="300" />
  <em>Percentage of number of accidents by month</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_month.png" width="800" height="200" />
  <em>Average total casualty by month</em>
</p>

<p>Generally, accident events of property damage and minor injury remains stable during the whole year.However, there seems to be seasonality on serious injury and fatality acidents. Serious injury accidents peak in Q1 (February), decrease afterwards, climb in summer (Q2, June) and reach its highest peak  of the year in September (Q3). It decreases steadily during winter (Q4. While, fatality accidents reach its peak of the year in Q1 (March) and then decreases during summer time (Q2). In Q3 (September), it is at its lowest point and  rises steadily during winter (Q4).</p>

<p>In terms of average casualty, interestingly, only fatality has seasonality. It increases steadily during Q1 and reach the first peak in April (Q2). The second and third peaks occur in July (Q2) and October (Q3), respectively. This pattern reflects three holidays, Easter, summer and winter holidays.</p>

<h3 id="people-based-analysis-who-are-at-risk---sex-alcohol-and-drugs-involvement">People-based analysis: Who are at risk? - Sex, alcohol and drugs involvement</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_sex.png" width="300" />
  <em>Accident distribution by sex</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_sex.png" width="300" height="450" />
  <em>Average total casualty by sex</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/drugs_alcohol_by_sex.png" width="800" height="300" />
  <em>Accident distribution by drugs and alcohol involvement</em>
</p>

<p>Ca. 60% of the accidents happens to be male and 40% is female. However, in average, death or fatality in female (2.24) is higher compared to that in male (1.83). Surprisingly, in South Australia, involvement of alcohol and drugs play little role in the number of accidents. It might be related to the measures taken by local authority or law enforcement in controlling alcohol and drugs circulation.</p>

<h3 id="people-based-analysis-who-are-at-risk---age">People-based analysis: Who are at risk? - Age</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_dist_by_age.png" width="500" />
  <em>Accident distribution by age</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_number_by_age.png" width="800" height="300" />
  <em>Percentage of number of accidents by age</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/avg_cas_by_age.png" width="800" height="200" />
  <em>Average total casualty by age</em>
</p>

<p>The highest number of accident happens with people 20-25 years of age. The number of accidents decreases linearly as a person gets older. This might be related to the awareness towards safety as people obtain maturity in driving experience. However, fatality cases are lower for younger people, below 45. The highest fatality happens at age of 55 to 60 years of age and decreases at older age. This might be related to less older people driving or generally being on the road. Interestingly, the victim of minor injury in average is quite high in baby and toddler (0-5 years old).</p>

<p>The highest casualty on fatality accidents in average still happen with people 20-25 years of age and it decreases slightly with increasing age. However, it generally raises again when people reach 70 years of age. In conclusion, children and very old people are the most vulnarable groups when it comes to injury and fatality, respectively.</p>

<h3 id="weather-based-analysis---how-does-weather-affect-accident-occurences">Weather-based analysis - How does weather affect accident occurences?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/raining_vs_not_raining.png" width="200" />
  <em>Weather condition: Raining or not raining?</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/wet_vs_dry.png" width="200" />
  <em>Road moisture: wet or dry?</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/night_vs_day.png" width="200" />
  <em>Day or Night?</em>
</p>

<p>All those weather-related features are conditions collected at the crash locations. It is interesting that most accidents happen in the clear weather condtions, unlike what people normally assume. In other words, weather play little influence to accident events.</p>

<h3 id="spatial-analysis---is-there-any-accident-hot-spot">Spatial analysis - Is there any accident ‘hot-spot’?</h3>

<p align="center">
  <img src="/assets/images/banners/road_crash/crash_map.png" width="600" />
  <em>Crash map (circle marker map)</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/cluster_map2.png" width="600" />
  <em>Crash map (cluster map)</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/cluster_map.png" width="600" />
  <em>Crash map (cluster map - zoomed out)</em>
</p>

<p>There is indeed accident ‘hotspot’ where most accidents happen, which is clustered around Adelaide city center. From this point, a hypothesis could be then formulated: <strong>The more complicated the road system (meaning many junctions, divided roads, etc. which represents downtown area), the higher the number of accidents will be.</strong></p>

<p>By plotting each accident spots based on its longitude and latitude using folium, it can be shown where accidents cluster and its number. The accident scenes can be zoomed out until street level to so see at what kind of road system the accident happens.</p>

<p style="margin-top:30px"><b>Feature engineering for hypothesis testing - Distance to city center</b></p>

<p>Latitude and longitude of city center Adelaide city were used to calculate the distance from city center to the accident scene.</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_number_by_distance.png" width="800" />
  <em>Number of accidents by the distance to Adelaide city center</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/distance_by_severity.png" width="800" />
  <em>Crash distance distribution by severity</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/linear_regression.png" width="600" />
  <em>Linear regression: Distance to city center vs. Number of accidents</em>
</p>

<p>The hypothesis is only partially proved to be true. Most accidents cluster within 100 km from Adelaide city center. As the distance gets futher, less accident events occur. There is indeed negative correlation between distance to city center and number of accidents, however, their relationship is not linear. The linear regression model is not suitable for the data as it results in MSE: 30.5 and R2: 9.36%.</p>

<p>Interestingly, most fatalities incidents happened to be in close to the city center area. In other other words, not only does the complex road system corresponds postively to the number of accidents, but also to the accident severity.</p>

<h2 id="part-2-model-building---severity-prediction-using-supervised-machine-learning">Part 2: Model building - Severity prediction using supervised machine learning</h2>

<p>All previously analyzed factors (time, age, sex, road system and distance to city center) seem to be influential to the accident severity. However, it is not clear  to what extent those factors would impact severity. In other words, the order of importance is analyzed using classification model.</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_hist_by_casualty.png" width="600" />
  <em>Severity classes as target (dependent) variable</em>
</p>

<p>Bar chart above shows that we deal with highly imbalanced dataset that would deliver poor predictive performance, specifically for the minority class. This is a problem because typically, the minority class is more important and therefore the problem is more sensitive to classification errors for the minority class than the majority class.</p>

<p>There are of course techniques to handle the imbalance dataset problem in classification. I would link good articles for that <a href="https://towardsdatascience.com/guide-to-classification-on-imbalanced-datasets-d6653aa5fa23">here</a> and <a href="https://www.analyticsvidhya.com/blog/2017/03/imbalanced-data-classification/">here</a>. However, for the sake of simplicity, binary classification was choosen consiting of injury/death group (sum of fatality, serious and minor injury) and PDO.</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/accident_hist_by_casualty2.png" width="600" />
  <em>Severity classes as target (dependent) variable - Binary classification</em>
</p>

<p>Classification models of logistic regression, decision tree and random forest were used and the results were compared. The best result was given by random forest classifier, giving accuracy of 74.3% compared to the logistics regression (66.8%) and decision tree (61.8%).</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/conf_mat.png" width="600" />
  <em>Confusion matrix - Random forest</em>
</p>

<p align="center">
  <img src="/assets/images/banners/road_crash/feature_importance.png" width="700" height="350" />
  <em>Feature importance - Random forest</em>
</p>

<p>Among top 20 important fetaures, distance to city center become to be the most influential factor, followed by age, vehicle year, time, location or area, drugs usage and sex. Other than that, crash location at T-Junction listed as an important factor strengthens the previous hyphothesis about complex road system of typical city center.</p>

<p style="margin-top:-30px"></p>

<h2 id="limitations"><strong>Limitations</strong></h2>

<ol>
  <li>The severity is indeed result of people not using safety equipment, such as helmet or safey belt. Dataset has this feature in it, however, it could not be used for this analysis as 90% of the data is missing.</li>
  <li>Accidents occur at a very remote areas of South Australia might be not recorded or captured as many as accidents that occur in developed areas.</li>
  <li>Based on the analysis results, it can be inferred that traffic volume play a role in the traffic accidents. However, this traffic volume feature at the time the accident occurs was not present in the dataset.</li>
  <li>The imbalance dataset limits the prediction only to binary classification.</li>
</ol>

<p style="margin-top:-30px"></p>

<h2 id="further-analysis"><strong>Further Analysis</strong></h2>

<p>The effect of safety equipment used by the victims or people involved on the traffic accidents should be analyzed and included in the model prediction.</p>

<p style="margin-top:-30px"></p>

<h2 id="final-notes"><strong>Final Notes</strong></h2>

<p>There are undeniably many factors that could cause or influence traffic accident occurrence, other than what was being analyzed in this analysis. However, providing insights from this data could certainly help involved parties such as local authority and community in taking measures preventing traffic accidents.<br />
For instance:</p>
<ul style="margin-top:-20px;">
  <li>Designing less complex traffic system</li>
  <li>Conducting traffic control during rush-hour</li>
  <li>Taking into account of people's driving behavior when developing traffic system</li>
  <li>Raising people awareness when driving or being on the road, etc.</li>
</ul>

<p>Finally, those insights could help creating safer environment and less financial loss due to property damage.</p>

<p>Find the code for this analysis <a href="https://github.com/nuki-susanti/Road-Crash-Analysis">Github</a><br />
Find tableau presentation <a href="https://public.tableau.com/app/profile/nuki.susanti/viz/RoadCrashAnalysis_16687247255900/RoadCrashAnalysis">Tableau</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="data analysis" /><category term="data science" /><category term="machine learning" /><category term="data mining" /><category term="classification" /><category term="supervised machine learning" /><summary type="html"><![CDATA[Source: pixabay]]></summary></entry><entry><title type="html">Building Snake Game Using Python Turtle</title><link href="http://localhost:4000/coding/game/2023/01/06/snake-game-using-turtle.html" rel="alternate" type="text/html" title="Building Snake Game Using Python Turtle" /><published>2023-01-06T00:00:00+01:00</published><updated>2023-01-06T00:00:00+01:00</updated><id>http://localhost:4000/coding/game/2023/01/06/snake-game-using-turtle</id><content type="html" xml:base="http://localhost:4000/coding/game/2023/01/06/snake-game-using-turtle.html"><![CDATA[<p align="center">
 <img src="/assets/images/banners/snake_game/cover_game.jpg" width="600" />
 Source: <a href="https://www.emulatorpc.com/snake-game//">emulatorpc.com</a>
</p>

<h2 id="overview"><strong>Overview</strong></h2>
<p>Being non-developer, but always dealing with code here and there, I have been feeling, my coding skill is lacking. So, this week, I wanted to refresh my programming skill and revisit a programming concept I have learned in the past, namely OOP (Object-Oriented Programming). I did some quick research on the small project I could take as exercise and come across old game I used to play on my old 3350 Nokia. Yes, snake game.</p>

<p>I use python as the main programming language and found that it comes with pre-installed library, turtle, thus it doesn’t need to be installed externally. Turtle is a pre-installed Python library that enables users to create pictures and shapes by providing them with a virtual canvas. As this game is very simple and we all might be familiar with the rules, I decided to re-create this game using python and turtle. 
Turtle documentation can be found <a href="https://docs.python.org/3/library/turtle.html">here</a>.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="object-oriented-programming"><strong>Object-Oriented Programming</strong></h2>
<p>As opposed to procedural, object-oriented programming uses concept of class and object. I always imagine that class is like building blocks when playing or building Lego. It is reusable piece of ‘tools’ that allows me to re-create an object without having to build everything from the scratch, which is why it is called ‘blueprint’. I really liked this concept when it was introduced to me at the first time because it requires less line of code to achieve the same goal. In addition, my code appears to be tidy and neat because OOP hides the ‘main machine’ on the back. From developer POV, OOP creates more maintainable code.</p>

<p>Class has attributes and methods. Attributes are everything that an object has, such as manufacturing year, color, shape, etc., while methods represent the abilities of an object; can it fly, talk or cook? It is built using method called constructor ‘<strong>init</strong>’. When this method is called, it allows the class to initialize the attributes of the class.</p>

<p>Class also allows us to be very flexible because it could inherit other’s class attributes and methods or called parent class. For example, the scoreboard, food and speed classes as subclasses (scoreboard.py, food.py, speed.py) inherits all attributes and methods from Turtle class as their parent class. This means, we could use all functionalities from Turtle class without repeating code and custom it as we wish. In python, this concept is called ‘inheritance’. What we need to do is only importing the class we want to inherit and calling the ‘<strong>super()</strong>’ method. Please note that I only use single inheritance here.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="building-snake-game"><strong>Building Snake Game</strong></h2>
<p>For this game, I broke down the steps into smaller ones to identify what I should do first, second, third and so on. In addition, I divided the files into several files that it won’t clutter the main file (‘app.py’). At the end, I happened to have five separate python files.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/python_files.png" width="200" />
</p>

<p>Beforehand, turtle library (also time) needs to be imported.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/library.png" width="200" />
</p>

<p style="margin-bottom:-30px"></p>

<h3 id="1-setting-up-the-screen">1.	Setting up the screen</h3>

<p align="center">
  <img src="/assets/images/banners/snake_game/part1a.png" width="600" />
</p>

<p>To prevent the screen from flashing away immediately, ‘exitonclick’ needs to be added at the bottom of the app.py file.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part1b.png" width="600" />
</p>

<h3 id="2-creating-snake-body">2.	Creating snake body</h3>

<p>I made the initial snake or seed of snake using only 2 blocks of square by initializing turtle object from turtle class. The default size of each block is 20 x 20. The starting position of initial snake is supposed to be at the center of the screen (default is (0,0)). Here tuple is used to define the starting point.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part2a.png" width="600" />
</p>

<p>Here I initialized the snake object from the snake class that I previously built.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part2b.png" width="600" />
</p>

<h3 id="3-moving-the-snake">3.	Moving the snake</h3>

<p>Still coming from the same snake class but using different method. This method aims for the body of the snake to follow its head. Remember that snake is made of two different parts of turtle blocks and each of block could move independently.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part3.png" width="600" />
</p>

<h3 id="4-controlling-the-snake-using-keypress">4.	Controlling the snake using keypress</h3>

<p>This step serves for controlling purpose using keyboard up, down, left and right.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part4a.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part4b.png" width="600" />
</p>

<h3 id="5-tracking-the-score">5.	Tracking the score</h3>

<p>I made separate a file to note and track the score (‘scoreboard.py’).</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part5.png" width="600" />
</p>

<h3 id="6-feeding-on-the-food">6.	Feeding on the food</h3>

<p>I also made ‘food.py’. file to write food class. I played a bit with shape and color of the food. It has turtle shape (I believe a real snake will have hard time when it tries to feed on turtle :)) and its color varies following the list of color specified at the top of the food.py file.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part6a.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part6b.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part6c.png" width="600" />
</p>

<h3 id="7-detecting-collision-with-the-wall">7.	Detecting collision with the wall</h3>

<p align="center">
  <img src="/assets/images/banners/snake_game/part7a.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part7b.png" width="600" />
</p>

<h3 id="8-detecting-collision-with-its-own-body">8. Detecting collision with its own body</h3>

<p align="center">
  <img src="/assets/images/banners/snake_game/part8.png" width="600" />
</p>

<h3 id="9-adding-difficulty-levels">9. Adding difficulty levels</h3>

<p>This is an additional feature I added at the beginning of the game, but the last step I took. It can be achieved by changing time.sleep after importing time library. Easy was set to be 1s, medium 0.5s and hard was 0.1s.</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part9a.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/part9b.png" width="600" />
</p>

<h2 id="playing-the-game"><strong>Playing the game</strong></h2>

<p>Here is the final look of the game. I have fun experimenting and trying it myself! :)</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/game_a.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/snake_game/game_b.png" width="600" />
</p>

<p>Find the code in <a href="https://github.com/nuki-susanti/Snake-Game">Github</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="coding" /><category term="game" /><category term="coding" /><category term="object-oriented programming" /><category term="oop" /><category term="game" /><summary type="html"><![CDATA[Source: emulatorpc.com]]></summary></entry><entry><title type="html">Rockbuster - Movie Rental Analysis</title><link href="http://localhost:4000/database/sql/exploratory%20data%20analysis/2022/12/19/rockbuster-movie-rental-analysis.html" rel="alternate" type="text/html" title="Rockbuster - Movie Rental Analysis" /><published>2022-12-19T00:00:00+01:00</published><updated>2022-12-19T00:00:00+01:00</updated><id>http://localhost:4000/database/sql/exploratory%20data%20analysis/2022/12/19/rockbuster-movie-rental-analysis</id><content type="html" xml:base="http://localhost:4000/database/sql/exploratory%20data%20analysis/2022/12/19/rockbuster-movie-rental-analysis.html"><![CDATA[<p align="center">
 <img src="/assets/images/banners/rockbuster/rockbuster.png" width="500" />
</p>

<h2 id="overview---business-problem"><strong>Overview - Business problem</strong></h2>
<p>Rockbuster Stealth LLC is a movie rental company that used to have stores around the world. Facing stiff competition from streaming services such as Netflix and Amazon Prime, the Rockbuster Stealth management team is planning to use its existing movie licenses to launch an online video rental service in order to stay competitive.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="goal"><strong>Goal</strong></h2>
<p>This analysis is intended to answer a series of business key questions and derive data-driven answers for company strategy in 2020.</p>
<ol style="margin-top:-20px;">
<li>Which movies contributed the most/least to revenue gain?</li>
<li>What was the average rental duration for all videos?</li>
<li>Which countries are Rockbuster customers based in?</li>
<li>Where are customers with a high lifetime value based?</li>
</ol>

<p>Essentially, this project aims to learn relational database management systems (RDBMS) including data structure, SQL query, data filtering and cleaning, joining tables, common table expressions (CTE) as well as visualization using Tableau.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="data"><strong>Data</strong></h2>
<p>Rockbuster company and data being used are all fictious. The dataset containing information about Rockbuster’s film inventory, customers, and payments, among other things is provided by Careerfoundry and can be found <a href="https://www.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip">here</a>.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="process"><strong>Process</strong></h2>
<p>This is SQL-based project using PostgreSQL database to analyse and essentially to answer business questions of a movie rental company. I began by drafting data dictionary that can be found <a href="https://github.com/nuki-susanti/Rockbuster-Analysis/blob/main/Data_Dictionary.pdf">here</a>.</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/erd.png" width="900" />
  <em>Entity Relationship Diagram (ERD)</em>
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/data_dictionary.png" />
  <em>Sample of data dictionary</em>
</p>

<h2 id="exploratory-data-analysis-eda">Exploratory Data Analysis (EDA)</h2>

<p style="margin-bottom:-30px"></p>

<h3 id="rockbuster-overview">Rockbuster overview</h3>

<p align="center">
  <img src="/assets/images/banners/rockbuster/overview_1.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/overview_table_1.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/overview_2.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/overview_table_2.png" />
</p>

<p><strong>For the sake of visualization, the obtained data from query is presented below.</strong></p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/overview.png" width="400" />
</p>

<h3 id="movies-and-revenue-by-rating-and-genre">Movies and Revenue by rating and genre</h3>

<p align="center">
  <img src="/assets/images/banners/rockbuster/movies_revenue_by_rating.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/movies_by_rating.png" width="300" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/revenue_by_rating.png" width="300" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/revenue_by_genre_sql.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/revenue_by_genre.png" width="900" />
</p>

<blockquote>
  <p>Genre categories:</p>
  <blockquote>
    <p>PG-13 - Parents Strongly Cautioned, Some Material May Be Inappropriate for Children Under 13. <br />
NC-17 - No One 17 and Under Admitted. <br />
PG - Parental Guidance Suggested, Some Material May Not Be Suitable for Children. <br />
R - Restricted, Children Under 17 Require Accompanying Parent or Adult Guardian. <br />
G - General Audiences, All Ages Admitted. <br /></p>
  </blockquote>
</blockquote>

<h3 id="mostleast-profitable-movies">Most/least profitable movies</h3>

<p align="center">
  <img src="/assets/images/banners/rockbuster/revenue_by_title.png" />
</p>

<p>The extracted data from above query is presented below.</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/most_profitable_movie.png" width="300" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/least_profitable_movie.png" width="300" />
</p>

<h3 id="average-rental-duration">Average rental duration</h3>

<p>As discovered previously, the average rental duration obtained from SQL query is 4.985 days or 5 days.</p>

<h3 id="revenue-by-country">Revenue by country</h3>

<p align="center">
  <img src="/assets/images/banners/rockbuster/revenue_by_country.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/global_market.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/sales_figure.png" width="600" />
</p>

<h3 id="top-customers">Top customers</h3>

<p align="center">
  <img src="/assets/images/banners/rockbuster/top_customer_sql.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/rockbuster/top_customer.png" width="800" />
</p>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li style="font-weight: bold">Popularity</li>
    <ul>
      <li>Sports, Sci-Fi, Animation, Drama and Comedy are top 5 popular genres.</li>
      <li>PG-13 rating is the most popular movie segment.</li>
    </ul>
    <li style="font-weight: bold">Global market &amp; sales figure</li>
    <ul>
      <li>India, China and US are the biggest market.</li>
      <li>Philippines has the highest rental order / customer, while Russia has the lowest.</li>
    </ul>
    <li style="font-weight: bold">Movies revenue</li>
    <ul>
      <li>Fast-moving rented movies (short-rental duration) are more profitable.</li>
    </ul>
</ul>

<h2 id="recommendations">Recommendations</h2>

<ul>
  <li>Top 5 movies by genre having revenue above $4,000: Sports, Sci-Fi, Animation, Drama and Comedy. Rockbuster should indeed invest more in those genres. However, these genres don‘t seem to relate to each other, thus, market (customer rental preference) by age groups shall be captured to specifically fulfill each group preferences.</li>
  <li>Movies having PG-13 rating are indeed the most profitable one. However, market for NC-17, PG and R movies seem to be promising as they share similar revenue of around $12,000, which indeed could be further exploited.</li>
  <li>Consider to take a closer look on the fast-moving rented movies (ex: 3 days but rented very often).</li>
  <li>Consider to add movies time variability and stay up to date as all movies are from the year of 2006.</li>
  <li>India, China and US are the biggest market. Those are dense populated countries, which can be commercially exploited. Rockbuster shall invest in the marketing campaign in the big population countries. The age groups data mentioned previously could help identify the market target in each respective country.</li>
  <li>Large population is indeed beneficial. However, repeated order from the same customer should be taken into account such as the case with Philippines, regardless its less population, it has the highest rental order / customer compared to others. For this purpose, such loyalty program for the top 10 customer shall be considered.</li>
</ul>

<h2 id="limitations"><strong>Limitations</strong></h2>

<p>Rockbuster and dataset used are fictious, therefore, this project is customized according to the learning goals.</p>

<p>Find the code for this analysis <a href="https://github.com/nuki-susanti/Rockbuster-Analysis">Github</a><br />
Find visualization in <a href="https://public.tableau.com/app/profile/nuki.susanti/viz/RockbusterStealthDataAnalysis_16618096649900/RockbusterAnalysis?publish=yes">Tableau</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="database" /><category term="SQL" /><category term="exploratory data analysis" /><category term="database" /><category term="PostgreSQL" /><category term="SQL" /><category term="exploratory data analysis" /><category term="EDA" /><category term="visualization" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Instacart - Online Grocery Analysis</title><link href="http://localhost:4000/data%20analysis/exploratory%20data%20analysis/2022/12/18/instacart-online-grocery-analysis.html" rel="alternate" type="text/html" title="Instacart - Online Grocery Analysis" /><published>2022-12-18T00:00:00+01:00</published><updated>2022-12-18T00:00:00+01:00</updated><id>http://localhost:4000/data%20analysis/exploratory%20data%20analysis/2022/12/18/instacart-online-grocery-analysis</id><content type="html" xml:base="http://localhost:4000/data%20analysis/exploratory%20data%20analysis/2022/12/18/instacart-online-grocery-analysis.html"><![CDATA[<p align="center">
  <img src="https://upload.wikimedia.org/wikipedia/commons/9/9f/Instacart_logo_and_wordmark.svg" width="500" />
  <em>Source: upload.wikimedia.org</em>
</p>

<h2 id="overview---business-problem"><strong>Overview - Business problem</strong></h2>
<p>Instacart is an online grocery store that has already made very good sales, but they want to uncover more information about their sales patterns. They assume they can’t target everyone using the same methods, and they’re considering a targeted marketing strategy. They want to target different customers with applicable marketing campaigns to see whether they have an effect on the sale of their products.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="goal"><strong>Goal</strong></h2>
<p>This analysis is intended to perform an initial exploratory data analysis in order to derive insights and suggest strategies for better segmentation based on the provided criteria. The key questions to be answered:</p>
<ol style="margin-top:-20px;">
<li>What are the busiest days of the week and hours of the day are (i.e., the days and times with the most orders) in order to schedule ads at times when there are fewer orders?</li>
<li>Are there are particular times of the day when people spend the most money, as this might inform the type of products they advertise at these times?</li>
<li>As Instacart has a lot of products with different price tags, marketing and sales want to use simpler price range groupings to help direct their marketing efforts.</li>
<li>Are there certain types of products that are more popular than others? The marketing and sales teams want to know which departments have the highest frequency of product orders.</li>
<li>The marketing and sales teams are particularly interested in the different types of customers in their system and how their ordering behaviors differ.</li>
</ol>
<ul style="margin-left:45px;">
  <li>What’s the distribution among users in regards to their brand loyalty (i.e., how often do they return to Instacart)?</li>
  <li>Are there differences in ordering habits based on a customer’s loyalty status?</li>
  <li>Are there differences in ordering habits based on a customer’s region?</li>
  <li>Is there a connection between age and family status in terms of ordering habits?</li>
  <li>What different classifications does the demographic information suggest? Age? Income? Certain types of goods? Family status?</li>
  <li>What differences can you find in ordering habits of different customer profiles? Consider the price of orders, the frequency of orders, the products customers are ordering, or anything else.</li>
</ul>

<p style="margin-bottom:-30px"></p>

<h2 id="data"><strong>Data</strong></h2>
<p>Instacart is a real company that’s made their data available online. However, the contents of the project brief as well as the data have been fabricated for the purpose of this project. The dataset comprises of information on the following parameters:</p>
<ul>
  <li><a href="https://s3.amazonaws.com/coach-courses-us/public/courses/data-immersion/A4/A4_Data_Assets/customers.zip">Customers</a></li>
  <li><a href="https://s3.amazonaws.com/coach-courses-us/public/courses/data-immersion/A4/A4_Data_Assets/4.3_orders_products.zip">Orders and Products</a></li>
  <li><a href="https://s3.amazonaws.com/coach-courses-us/public/courses/data-immersion/A4/A4_Data_Assets/4.4_departments.zip">Departments</a></li>
</ul>

<p>Data dictionary can be found <a href="https://gist.github.com/jeremystan/c3b39d947d9b88b3ccff3147dbcf6c6b">here</a>.</p>

<p style="margin-bottom:-30px"></p>

<h2 id="process"><strong>Process</strong></h2>
<p>This is python-based project to analyse and essentially to answer business questions of an online grocery store that operates through an app. First step is performing data wrangling which consist of data cleaning, consistency checking and merging. The merged dataset is used to answer above-defined business key question and the corresponding visualizations are performed using python.</p>

<h2 id="exploratory-data-analysis-eda">Exploratory Data Analysis (EDA)</h2>

<p style="margin-bottom:-30px"></p>

<h3 id="busiest-days-of-the-week-and-hours-of-the-day">Busiest days of the week and hours of the day</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/hist_order_hour_of_day.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_order_day_of_week.png" width="500" />
</p>

<p>Those bar charts show that most orders occur between 10 AM to 3 PM with only slight differences. It starts to drop at 4 PM. However, afternoon and night orders are considerably high, compared to midnight orders (12-5 AM). Sunday (0) and Monday (1)are the most busiest days where most of orders are placed.</p>

<p><strong>Recommendations</strong>:</p>
<ul style="margin-top:-20px;">
  <li>Ads should be intensified when orders are at minimum period, at 4 - 9 PM during weekdays.</li>
  <li>During weekend, ads could be targetted for new customers, such as referal bonus. When many people are ordering, they might also see this interesting offer and ask their families, friends, etc. to join.</li>
</ul>

<h3 id="times-of-the-day-when-people-spend-the-most-money">Times of the day when people spend the most money</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/line_prices_ohd.png" width="500" />
</p>

<p>As depicted by the line chart above, customers tend to spend most of money on the midnight and morning orders, in this case, it is between 1 AM to 9 AM. However, from the previous histogram, it was discovered that this period of time is the low order period. In other words, this could mean that we earn more profit from these high value orders despite its low order quantity.</p>

<p>Interestingly, the lowest value of orders occured at 10 AM and slowly increase afterwards. While, the histogram clearly shown that day time is generaly busy time where most orders are placed. This also proves that we earn less profit from these low value orders despite its high order quantity.</p>

<p><strong>Recommendations</strong>:
Ads of high range products should be started at 10 AM until around 6 PM.</p>

<h3 id="price-range-groupings-to-direct-marketing-efforts">Price range groupings to direct marketing efforts</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/hist2_prices.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_prices_dist_avail.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_prices_dist_order.png" width="500" />
</p>

<blockquote>
  <ul>
    <li>If a product costs less than or equal to $5, it will be labeled ‘Low-range product’.</li>
    <li>If a product costs more than $5 but less than $15, it will be labeled ‘Mid-range product’.</li>
    <li>If a product costs more than or equal to $15, it will be labeled ‘High-range product’.</li>
  </ul>
</blockquote>

<p>The histogram above shows the range of product prices. The lowest, highest and average price are $1, $25 and $7.4, respectively. The majority of instacart products is concentrated in the low to mid-range group and only 1.3% of all products is high-range product. From the order pie chart (second pie chart), it can be seen that the products availability for each group corresponds to the number of order.</p>

<p><strong>Recommendations</strong>:</p>
<p style="margin-top:-20px;">
  In general, the order of high-range products is considered low compared to the mid and low-range products. Altough it may seem too tempting to sell more high-range products in order to gain high profit by just one order, however, it can be challenging as the price is also higher as:
</p>
<ul style="margin-top:-20px;">
  <li>first, customer may think several times before buying and compare to other stores as they have to spend quite amount of money. This of course could influence the number of order.</li>
  <li>second, based on the first point, sales and marketing team should learn how the competition situation in the high-range products.</li>
  <li>third, high-range products means greater loss when they aren't handled properly, for example during delivery by supplier or during storing.</li>
</ul>

<p><strong>Deeper research should be performed to address those three points. Afterwards, ads can then be adjusted accordingly.</strong></p>

<h3 id="popular-products-and-departments">Popular products and departments</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_sales_per_depts.png" width="800" height="400" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_orders_per_depts.png" width="800" height="400" />
</p>

<p>Looking at two bar charts above, 4 most profitable departments are: dairy eggs, produce, beverages and snacks. It is therefore interesting to see which kind of customers places those orders. <em>For reference</em>: Produce is a generalized term for many farm-produced crops, including fruits and vegetables (grains, oats, etc. are also sometimes considered produce). More specifically, the term produce often implies that the products are fresh and generally in the same state as where and when they were harvested.</p>

<p><strong>Recommendations</strong>:</p>
<ul style="margin-top:-20px;">
  <li>Ads should be made more actively on these 4 departments, for example by regularly informing what products are currently on the discount and what will be discounted in the next turn.</li>
  <li>For products from produce department, it should be highlighted in case those products are locally produced. This of course could influence customers who are aware of sustainability issue.</li>
</ul>

<h3 id="customer-types-and-behavior---brand-loyalty">Customer types and behavior - Brand loyalty</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_cust_dist.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_cust_dist2.png" width="500" />
</p>

<blockquote>
  <ul>
    <li>If a customer makes less than or equal to 10 orders, it will be labeled ‘New customer’.</li>
    <li>If a customer makes more than 10 orders but less than 40 orders, it will be labeled ‘Regular customer’.</li>
    <li>If a customer makes more than 40 orders, it will be labeled ‘Loyal customer’.</li>
  </ul>
</blockquote>

<p>It can be seen that regular customers and loyal customers made up the majority of Instacart current customer. As regular and loyal customers are the majority, most orders are made by these two groups.</p>

<p><strong>Recommendations</strong>:</p>
<p style="margin-top:-20px">
More research should be conducted on these groups, for example questionnaire on: why someone decides to join as a new customer, what makes them loyal and what encourage them to regularly shop on Instacart? <br /> Once their motives are discovered, specific ads should be effectively targeted to each of this group.
</p>

<h3 id="customer-types-and-behavior---ordering-habits-by-loyalty-status">Customer types and behavior - Ordering habits by loyalty status</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_avgspend_habit.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_maxspend_habit.png" width="600" />
</p>

<p>The bar charts above shows the spending habit in average and in maximum values in terms of day since prior order and products prices. Generally, their habit in spending is not quite different from each other. The only difference is that loyal customer in average made the fastest order since the previous order, followed by regular and new customers.</p>

<p><strong>Recommendations</strong>:<br />
Regular reminder (for example: notification via app, email, etc.) could be used to encourage new customers to make new orders.</p>

<h3 id="customer-types-and-behavior---ordering-habits-by-region">Customer types and behavior - Ordering habits by region</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/line_order_hour.png" width="600" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/line_order_week.png" width="600" />
</p>

<p>As shown by two line charts, there is no difference in terms of order time in all regions above. It has peak at early morning and at the weekend.</p>

<p align="center" id="sales">
  <img src="/assets/images/banners/instacart/bar_sales_per_dept_region.png" width="900" height="400" />
</p>

<p>It is so surprising when total sales is broken down into region and departments. Deli department has the highest sales among other department in all regions. It is then followed by pets, missing, produce and personal care. <em>For reference</em>: Deli (delicatessen) is where ready-to-eat food products (such as cooked meats and prepared salads) are sold.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_gender_group.png" width="500" />
</p>

<p><strong>Recommendations</strong>:</p>
<ul style="margin-top:-20px">
  <li>Ads for pets and personal care should be effectively intensified as both has rather fixed customers. For example: Pets products are of course interesting for people having pet at home.</li>
  <li>Personal care can be easily divided into male and female groups and see the favorites among customers as Instacart has equal customers based on gender.</li>
  <li>Data from department labelled missing here should be gained and researched more as there is promising market.</li>
</ul>

<h3 id="customer-types-and-behavior---ordering-habits-by-age-and-family-status">Customer types and behavior - Ordering habits by age and family status</h3>

<p>This analysis aims to discover if there is a connection between age and family status in terms of ordering habits.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_group_range.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/hist_income.png" width="500" />
</p>

<p style="margin-left:-40px;">
  <img src="/assets/images/banners/instacart/scatter_age_income.png" width="500" />
</p>

<p align="center" style="margin-left:-50px;">
  <img src="/assets/images/banners/instacart/bar_income_per_famstats.png" width="700" height="400" />
</p>

<p>The majority of customers is from the age of 25-74 with rather equal proportion. The average income of the customers lays around $100,000. In general, income rises with age as shown by scatter plot of age vs income. Additionally, the majority age group of 20-40 years has a income range up to $200,000 and small portion of this group manage to earn up to $400,000. At the age of 41 onwards, the income of majority of this group rises up to $300,000. Small portion of thise group, however, earns higher up to $600,000.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/hist_orders_per_famstats.png" width="700" height="400" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/scat_income_order.png" width="500" />
</p>

<p>Bar chart above shows that family status does not influence the average number of orders ($17.8 - $18) that customer placed which could mean that Instacart products reach all family models. Scatter plot shows that there is no relationship between number of orders that customer placed and their corresponding income. It is however revealed, that most orders are placed by customers who earn less than $200,000. It is also linked to our previous finding that the majority of our customers have family status of married with average income of $100,000.</p>

<p><strong>Recommendations</strong>:<br />
As there is no connection between family status and income in terms of ordering habit, so ads should be targetted to each of this group individually containing their corresponding products. Ads for low and mid-range products will attracts more order traffic as most orders are placed by customers who earn less than $200,000.</p>

<h3 id="customer-demographic-classifications">Customer demographic classifications</h3>

<p align="center">
  <img src="/assets/images/banners/instacart/pie_cust_per_region.png" width="500" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_spender_flag.png" width="500" />
</p>

<blockquote>
  <p>Spender flag is calculated for each ‘user_id’ based on the average price across all their orders.<br /></p>
  <ul>
    <li>Customer who makes order less than $10 is labbelled ‘Low spender’.<br /></li>
    <li>Customer who makes order equal to or more than $10 is labbelled ‘High spender’.</li>
  </ul>
</blockquote>

<p>As depicted by above bar charts, we could clearly see that both high spender and low spender customers are located in the South region followed by West, Midwest and Northeast. However, as region is a group based on location, the number of states in each group may not be equal. For this purpose, let’s see how many states in each regions.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/state_code.png" />
</p>

<p align="center">
  <img src="/assets/images/banners/instacart/state_classifications.png" width="20%" />
</p>

<p>It can be clearly seen that South has the most states and therefore, also the most customers. However, in order to see how the spending behavior in the individual basis, it can be seen in the table below.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/state_customers.png" width="80%" />
</p>

<p>The table above shows that despite having the highest number of customers, customer in the South region does not place high value of order in average. It turns out that customer in the Midwest region places high value orders in average, despite having less number of customer.</p>

<p>Additionally, it was previously discussed that 3 most profitable departments are: dairy eggs, produce and beverages. It is therefore interesting to see which group of customers places those orders.</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_sales_per_age_group.png" width="500" />
</p>

<p>Bar chart above confirms our prior finding that the most active shoppers are customers ranging from 25-74 years of age. Bar chart below aims to discover what department obtains the most orders as it can be compared to the departments making th most profit. Does high order of products corresponds to the high profit? (<a href="#sales">see bar chart of total sales per departments and per region</a>)</p>

<p align="center">
  <img src="/assets/images/banners/instacart/bar_sales_per_region.png" width="900" height="400" />
</p>

<p>In conclusion, the popularity of certain types of goods show also a similar pattern in 4 regions (<a href="#sales">see bar chart of total sales per departments and per region</a>). Top 3 most profitable departments are produce, dairy eggs and beverages despite medium or low order quantity. While products from deli and pets with high number of order can not beat those 3 most profitable department in terms of sales/profit.</p>

<p><strong>Recommendations</strong>:</p>
<ul style="margin-top:-20px">
  <li>The similar demographic pattern could make ads generally applicable.</li>
  <li>The adjustment in terms of ads should be considered with regard to products types and ads timing:</li>
    <ul>
      <li>Low to mid-range products should be advertised to all range of customers, particularly at minimum order period.</li>
      <li>High-range products ads should be targetted for customer who earns more than $200,000.</li>
    </ul>
  <li style="margin-top:-10px">Top 3 most profitable departments are produce, dairy eggs and beverages despite medium or low order quantity. Thus, profit can be increased if orders from these department can be increased by intensifying specific ads.</li>
</ul>

<h2 id="limitations"><strong>Limitations</strong></h2>

<p>The content of the dataset is fabricated, therefore, it does not completely reflect real situation of Instacart.</p>

<h2 id="further-analysis"><strong>Further Analysis</strong></h2>

<p>As previously mentioned that age, income and family status in general do not make huge difference in terms of ordering habit. It is, thus, interesting to analyze deeper on what factor mainly triggers different ordering habit. For this purpose, more data might be required such as data from customized customer surveys.</p>

<p>Find the code for this analysis <a href="https://github.com/nuki-susanti/Instacart-Analysis">Github</a><br />
Connect with me! <a href="https://www.linkedin.com/in/nukilsusanti/">Linkedin</a></p>]]></content><author><name>Nuki Susanti</name></author><category term="data analysis" /><category term="exploratory data analysis" /><category term="exploratory data analysis" /><category term="EDA" /><category term="visualization" /><summary type="html"><![CDATA[Source: upload.wikimedia.org]]></summary></entry></feed>